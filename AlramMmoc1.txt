const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const admin = require('firebase-admin');
const serviceAccount = require('./login-mnoc-700-mhz-firebase-adminsdk-fbsvc-bfbd0dd4b5.json');

// === üîê Firebase Init ===
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://login-mnoc-700-mhz-default-rtdb.asia-southeast1.firebasedatabase.app"
});
const db = admin.database();

const token = '8445412019:AAE46kx1ltjGQVgGLopD1aTymeo_B9adigQ'; // üõë ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå token ‡∏à‡∏£‡∏¥‡∏á
const bot = new TelegramBot(token, { polling: true });
console.log("ü§ñ Telegram Bot is running...");

// === üì¶ Parser ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ===
function parseTelegramAlarm(text) {
  const lines = text.trim().split("\n");
  const result = {};

  for (const line of lines) {
    const [key, ...rest] = line.split(":");
    const value = rest.join(":").trim();

    if (key.includes("NE group")) result.ne_group = value;
    else if (key.includes("Alarm Occurred")) result.alarm_occurred = value;
    else if (key.includes("Alarm Cleared")) result.status = value ? "NORMAL" : "DOWN";
    else if (key.includes("Severity")) result.severity = value;
    else if (key.includes("Alarm Name")) result.alarm_name = value;
    else if (key.includes("NE Type")) result.ne_type = value;
    else if (key.includes("eNodeB ID")) result.id = value;
    else if (key.includes("Location")) result.location = value;
    else if (key.includes("Region")) result.region = value;
  }

  return result.id ? { [result.id]: result } : null;
}

// === üì• Bot Message Handler ===
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  console.log(`[MSG] ${text}`);

  // 1Ô∏è‚É£ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse ‡πÅ‡∏ö‡∏ö Alarm ‡πÄ‡∏ï‡πá‡∏°
  const parsed = parseTelegramAlarm(text);
  if (parsed) {
    const enodebId = Object.keys(parsed)[0];
    const data = parsed[enodebId];

    data.updated = Date.now();

    db.ref("enodeb_alarms/" + enodebId).set(data)
      .then(() => {
        console.log(`‚úÖ Alarm saved: ${enodebId}`);
        bot.sendMessage(chatId, `üì° ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Alarm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EnodeB ${enodebId} ‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${data.status})`);
      })
      .catch((err) => {
        console.error("‚ùå Firebase error:", err);
        bot.sendMessage(chatId, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase ‡πÑ‡∏î‡πâ");
      });
    return;
  }

  // 2Ô∏è‚É£ Fallback: ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô EnodeB 123456 is DOWN
  const patterns = [
    /(?:EnodeB|eNodeB|Site)?\s*(\d{5,6})\s*(?:is|status:|->)?\s*(DOWN|UP|Normal)/i,
    /‚õî\s*EnodeB\s*(\d{5,6})\s*is\s*DOWN/i,
    /‚úÖ\s*EnodeB\s*(\d{5,6})\s*is\s*UP/i
  ];

  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match) {
      const enodebId = match[1];
      const rawStatus = match[2]?.toUpperCase() || 'UNKNOWN';
      const status = (rawStatus === 'DOWN') ? 'DOWN' : 'NORMAL';

      const data = {
        status: status,
        updated: Date.now()
      };

      db.ref("enodeb_alarms/" + enodebId).set(data)
        .then(() => {
          console.log(`üì° Saved simple format: EnodeB ${enodebId} => ${status}`);
          bot.sendMessage(chatId, `üì° EnodeB ${enodebId} ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "${status}" ‡πÅ‡∏•‡πâ‡∏ß`);
        })
        .catch((err) => {
          console.error('‚ùå Firebase error:', err);
          bot.sendMessage(chatId, "‚ö†Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        });
      return;
    }
  }

  // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î‡πÄ‡∏•‡∏¢
  bot.sendMessage(chatId,
    "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö\n\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á:\n‚Ä¢ EnodeB 123456 is DOWN\n‡∏´‡∏£‡∏∑‡∏≠\n‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Alarm ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"
  );
});
