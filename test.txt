<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>AWN EnodeB 700 MHz Map</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css" />

  <style>
    #map { height: 100vh; }

    #controls {
      position: absolute;
      top: 50%;
      left: 10px;
      transform: translateY(-50%);
      z-index: 1000;
      background: white;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
      font-family: "Segoe UI", sans-serif;
      font-size: 14px;
      min-width: 240px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      margin-bottom: 10px;
    }

    .form-group label {
      font-weight: bold;
      margin-bottom: 4px;
    }

    .form-group select,
    .form-group input {
      padding: 6px 8px;
      border-radius: 4px;
      border: 1px solid #ccc;
      font-size: 13px;
    }

    .form-group input:focus,
    .form-group select:focus {
      border-color: #4285F4;
      box-shadow: 0 0 2px rgba(66,133,244,0.6);
      outline: none;
    }

    .export-buttons {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }

    .export-buttons button {
      padding: 6px;
      font-size: 13px;
      border-radius: 4px;
      border: none;
      background: #4285F4;
      color: white;
      cursor: pointer;
    }

    .export-buttons button:hover {
      background: #3367D6;
    }
  </style>
</head>
<body>

<div id="controls">
  <div class="form-group">
    <label for="regionSelect">üìç Region:</label>
    <select id="regionSelect"><option value="">-- All --</option></select>
  </div>

  <div class="form-group">
    <label for="searchInput">üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</label>
    <input type="text" id="searchInput" placeholder="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î / ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ / ‡∏ï‡∏≥‡∏ö‡∏•" />
  </div>

  <div class="form-group">
    <label for="enodebInput">üì° EnodeB ID:</label>
    <input type="text" id="enodebInput" placeholder="‡πÄ‡∏ä‡πà‡∏ô 150628" />
  </div>

  <div class="form-group">
    <label for="statusSelect">üõë ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</label>
    <select id="statusSelect">
      <option value="">-- All --</option>
      <option value="down">‚õî DOWN</option>
      <option value="normal">‚úÖ Normal</option>
    </select>
  </div>

  <div class="export-buttons">
    <button onclick="exportCSV()">‚¨á Export CSV</button>
    <button onclick="exportGeoJSON()">‚¨á Export GeoJSON</button>
  </div>
</div>

<div id="map"></div>

<!-- Leaflet + Firebase -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"></script>

<script type="module">
  import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
  import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-database.js";

  const firebaseConfig = {
    apiKey: "AIzaSyAjeEjeZsYDHBROCUPdt2jJ0gQ9JAfhW8k",
    authDomain: "login-mnoc-700-mhz.firebaseapp.com",
    databaseURL: "https://login-mnoc-700-mhz-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "login-mnoc-700-mhz",
    storageBucket: "login-mnoc-700-mhz.appspot.com",
    messagingSenderId: "568660367970",
    appId: "1:568660367970:web:6a344679a6867b23a58f3b",
    measurementId: "G-PPSQ9LQ8E0"
  };

  const app = initializeApp(firebaseConfig);
  const db = getDatabase(app);

  let enodebAlarms = {};
  let geojsonData = null;
  let currentLayer = null;
  let markers = L.markerClusterGroup();
  let filteredFeatures = [];

  const map = L.map("map").setView([15.8700, 100.9925], 6);
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    maxZoom: 18,
    attribution: "¬© OpenStreetMap"
  }).addTo(map);

  const regionSelect = document.getElementById("regionSelect");
  const searchInput = document.getElementById("searchInput");
  const enodebInput = document.getElementById("enodebInput");
  const statusSelect = document.getElementById("statusSelect");

  regionSelect.addEventListener("change", updateMap);
  searchInput.addEventListener("input", updateMap);
  enodebInput.addEventListener("input", updateMap);
  statusSelect.addEventListener("change", updateMap);

  fetch("awn_sites_with_enodeb.geojson")
    .then(res => res.json())
    .then(data => {
      geojsonData = data;
      const allRegions = new Set();
      geojsonData.features.forEach(f => {
        if (f.properties.Region) allRegions.add(f.properties.Region);
      });
      [...allRegions].sort().forEach(region => {
        const opt = document.createElement("option");
        opt.value = region;
        opt.textContent = region;
        regionSelect.appendChild(opt);
      });
      updateMap();
    });

  onValue(ref(db, "enodeb_alarms"), snapshot => {
    enodebAlarms = snapshot.val() || {};
    updateMap();
  });

  function updateMap() {
    const selectedRegion = regionSelect.value.trim();
    const keyword = searchInput.value.trim().toLowerCase();
    const enodebKeyword = enodebInput.value.trim().toLowerCase();
    const selectedStatus = statusSelect.value;

    if (currentLayer) {
      markers.clearLayers();
      map.removeLayer(markers);
    }

    filteredFeatures = geojsonData.features.filter(f => {
  const p = f.properties;
  const enodebId = p["EnodeB ID"]?.toString();
  const alarmStatus = enodebId && enodebAlarms[enodebId]?.status;
  const isDown = alarmStatus === "DOWN";
  const isUp = alarmStatus === "UP";

  const regionMatch = selectedRegion ? p.Region === selectedRegion : true;
  const keywordMatch = keyword === "" || [p["AWN Site Code"], p["Province"], p["District"], p["Subdistrict"]]
    .filter(Boolean)
    .some(val => val.toLowerCase().includes(keyword));
  const enodebMatch = enodebKeyword === "" ||
    (p["EnodeB ID"] && p["EnodeB ID"].toString().toLowerCase().includes(enodebKeyword));
  const statusMatch =
    selectedStatus === "" ||
    (selectedStatus === "down" && isDown) ||
    (selectedStatus === "normal" && isUp);

  return regionMatch && keywordMatch && enodebMatch && statusMatch;
});

const layer = L.geoJSON({ type: "FeatureCollection", features: filteredFeatures }, {
  pointToLayer: (f, latlng) => {
    const props = f.properties;
    const enodebId = props["EnodeB ID"]?.toString();
    const alarm = enodebAlarms[enodebId];
    const status = alarm ? alarm.status : "On service";
    const statusIcon = status === "DOWN" ? "‚õî" : "‚úÖ";

    const icon = status === "DOWN" ? redIcon() : blueIcon();

    const lat = latlng.lat;
    const lng = latlng.lng;

    const popupContent = `
      <b>Status:</b> ${statusIcon} ${status}<br>
      <b>AWN Site Code:</b> ${props.site_code}<br>
      <b>EnodeB ID:</b> ${enodebId}<br>
      ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ${props.province}<br>
      ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: ${props.amphoe}<br>
      ‡∏ï‡∏≥‡∏ö‡∏•: ${props.tambon}<br>
      Region: ${props.region}<br>
      Lat: ${lat}<br>
      Long: ${lng}<br>
      üîç <a href="https://maps.google.com/?q=${lat},${lng}" target="_blank">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Google Maps</a>
    `;

    return L.marker(latlng, { icon }).bindPopup(popupContent);
  }
});


    currentLayer = layer;
    markers = L.markerClusterGroup();
    markers.addLayer(currentLayer);
    map.addLayer(markers);

    if (filteredFeatures.length > 0 && currentLayer.getBounds().isValid()) {
      map.fitBounds(currentLayer.getBounds());
    }
  }

  function redIcon() {
    return new L.Icon({
      iconUrl: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png',
      iconSize: [32, 32],
      iconAnchor: [16, 32],
      popupAnchor: [0, -32]
    });
  }

  function blueIcon() {
    return new L.Icon({
      iconUrl: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',
      iconSize: [32, 32],
      iconAnchor: [16, 32],
      popupAnchor: [0, -32]
    });
  }

  // ‚úÖ Export CSV
  window.exportCSV = function () {
    const rows = filteredFeatures.map(f => {
      const p = f.properties;
      return {
        Status: enodebAlarms[p["EnodeB ID"]] ? "DOWN" : "Normal",
        "AWN Site Code": p["AWN Site Code"] || "",
        "EnodeB ID": p["EnodeB ID"] || "",
        Province: p["Province"] || "",
        District: p["District"] || "",
        Subdistrict: p["Subdistrict"] || "",
        Region: p["Region"] || "",
        Lat: f.geometry.coordinates[1],
        Long: f.geometry.coordinates[0],
      };
    });

    const csvContent = [
      Object.keys(rows[0]).join(","),
      ...rows.map(row => Object.values(row).join(","))
    ].join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "filtered_enodeb.csv";
    a.click();
    URL.revokeObjectURL(url);
  };

  // ‚úÖ Export GeoJSON
  window.exportGeoJSON = function () {
    const data = {
      type: "FeatureCollection",
      features: filteredFeatures
    };
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "filtered_enodeb.geojson";
    a.click();
    URL.revokeObjectURL(url);
  };
</script>
</body>
</html>